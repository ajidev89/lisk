"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toNexusAccount = void 0;
const viem_1 = require("viem");
const account_abstraction_1 = require("viem/account-abstraction");
const abi_1 = require("../constants/abi/index.js");
const Constants_1 = require("./utils/Constants.js");
const constants_1 = require("../constants/index.js");
const toK1Validator_1 = require("../modules/k1Validator/toK1Validator.js");
const Utils_1 = require("./utils/Utils.js");
const toSigner_1 = require("./utils/toSigner.js");
const toNexusAccount = async (parameters) => {
    const { chain, transport, signer: _signer, index = 0n, module: module_, factoryAddress = constants_1.k1ValidatorFactoryAddress, k1ValidatorAddress = constants_1.k1ValidatorAddress, key = "nexus account", name = "Nexus Account" } = parameters;
    const signer = await (0, toSigner_1.toSigner)({ signer: _signer });
    const walletClient = (0, viem_1.createWalletClient)({
        account: signer,
        chain,
        transport,
        key,
        name
    }).extend(viem_1.publicActions);
    const publicClient = (0, viem_1.createPublicClient)({
        chain,
        transport
    });
    const signerAddress = walletClient.account.address;
    const entryPointContract = (0, viem_1.getContract)({
        address: constants_1.ENTRY_POINT_ADDRESS,
        abi: abi_1.EntrypointAbi,
        client: {
            public: publicClient,
            wallet: walletClient
        }
    });
    const factoryData = (0, viem_1.encodeFunctionData)({
        abi: abi_1.K1ValidatorFactoryAbi,
        functionName: "createAccount",
        args: [signerAddress, index, [], 0]
    });
    let _accountAddress = parameters.accountAddress;
    const getAddress = async () => {
        if (!(0, Utils_1.isNullOrUndefined)(_accountAddress))
            return _accountAddress;
        try {
            _accountAddress = (await publicClient.readContract({
                address: factoryAddress,
                abi: abi_1.K1ValidatorFactoryAbi,
                functionName: "computeAccountAddress",
                args: [signerAddress, index, [], 0]
            }));
        }
        catch (e) {
            if (e.shortMessage?.includes(Constants_1.ERROR_MESSAGES.MISSING_ACCOUNT_CONTRACT)) {
                throw new Error(Constants_1.ERROR_MESSAGES.FAILED_COMPUTE_ACCOUNT_ADDRESS);
            }
            throw e;
        }
        return _accountAddress;
    };
    const getInitCode = () => (0, viem_1.concatHex)([factoryAddress, factoryData]);
    const getCounterFactualAddress = async () => {
        if (_accountAddress)
            return _accountAddress;
        try {
            await entryPointContract.simulate.getSenderAddress([getInitCode()]);
        }
        catch (e) {
            if (e?.cause?.data?.errorName === "SenderAddressResult") {
                _accountAddress = e?.cause.data.args[0];
                if (!(0, Utils_1.addressEquals)(_accountAddress, viem_1.zeroAddress)) {
                    return _accountAddress;
                }
            }
        }
        throw new Error("Failed to get counterfactual account address");
    };
    let module = module_ ??
        (0, toK1Validator_1.toK1Validator)({
            address: k1ValidatorAddress,
            accountAddress: await getCounterFactualAddress(),
            initData: signerAddress,
            deInitData: "0x",
            signer
        });
    const isDeployed = async () => {
        const address = await getCounterFactualAddress();
        const contractCode = await publicClient.getCode({ address });
        return (contractCode?.length ?? 0) > 2;
    };
    const getUserOpHash = async (userOp) => {
        const packedUserOp = (0, Utils_1.packUserOp)(userOp);
        const userOpHash = (0, viem_1.keccak256)(packedUserOp);
        const enc = (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)("bytes32, address, uint256"), [userOpHash, constants_1.ENTRY_POINT_ADDRESS, BigInt(chain.id)]);
        return (0, viem_1.keccak256)(enc);
    };
    const encodeExecuteBatch = async (calls, mode = Constants_1.EXECUTE_BATCH) => {
        const executionAbiParams = {
            type: "tuple[]",
            components: [
                { name: "target", type: "address" },
                { name: "value", type: "uint256" },
                { name: "callData", type: "bytes" }
            ]
        };
        const executions = calls.map((tx) => ({
            target: tx.to,
            callData: tx.data ?? "0x",
            value: BigInt(tx.value ?? 0n)
        }));
        const executionCalldataPrep = (0, viem_1.encodeAbiParameters)([executionAbiParams], [executions]);
        return (0, viem_1.encodeFunctionData)({
            abi: (0, viem_1.parseAbi)([
                "function execute(bytes32 mode, bytes calldata executionCalldata) external"
            ]),
            functionName: "execute",
            args: [mode, executionCalldataPrep]
        });
    };
    const encodeExecute = async (call, mode = Constants_1.EXECUTE_SINGLE) => {
        const executionCalldata = (0, viem_1.encodePacked)(["address", "uint256", "bytes"], [call.to, BigInt(call.value ?? 0n), (call.data ?? "0x")]);
        return (0, viem_1.encodeFunctionData)({
            abi: (0, viem_1.parseAbi)([
                "function execute(bytes32 mode, bytes calldata executionCalldata) external"
            ]),
            functionName: "execute",
            args: [mode, executionCalldata]
        });
    };
    const getNonce = async (parameters) => {
        try {
            const TIMESTAMP_ADJUSTMENT = 16777215n;
            const defaultedKey = BigInt(parameters?.key ?? 0n) % TIMESTAMP_ADJUSTMENT;
            const defaultedValidationMode = parameters?.validationMode ?? "0x00";
            const key = (0, viem_1.concat)([
                (0, viem_1.toHex)(defaultedKey, { size: 3 }),
                defaultedValidationMode,
                module.address
            ]);
            const accountAddress = await getAddress();
            return await entryPointContract.read.getNonce([
                accountAddress,
                BigInt(key)
            ]);
        }
        catch (e) {
            return 0n;
        }
    };
    const setModule = (validationModule) => {
        module = validationModule;
    };
    const signMessage = async ({ message }) => {
        const tempSignature = await module.signMessage(message);
        const signature = (0, viem_1.encodePacked)(["address", "bytes"], [module.address, tempSignature]);
        const erc6492Signature = (0, viem_1.concat)([
            (0, viem_1.encodeAbiParameters)([
                {
                    type: "address",
                    name: "create2Factory"
                },
                {
                    type: "bytes",
                    name: "factoryCalldata"
                },
                {
                    type: "bytes",
                    name: "originalERC1271Signature"
                }
            ], [factoryAddress, factoryData, signature]),
            Constants_1.MAGIC_BYTES
        ]);
        const accountIsDeployed = await isDeployed();
        return accountIsDeployed ? signature : erc6492Signature;
    };
    async function signTypedData(parameters) {
        const { message, primaryType, types: _types, domain } = parameters;
        if (!domain)
            throw new Error("Missing domain");
        if (!message)
            throw new Error("Missing message");
        const types = {
            EIP712Domain: (0, Utils_1.getTypesForEIP712Domain)({ domain }),
            ..._types
        };
        const messageStuff = message.stuff;
        (0, viem_1.validateTypedData)({
            domain,
            message,
            primaryType,
            types
        });
        const appDomainSeparator = (0, viem_1.domainSeparator)({ domain });
        const accountDomainStructFields = await (0, Utils_1.getAccountDomainStructFields)(publicClient, await getAddress());
        const parentStructHash = (0, viem_1.keccak256)((0, viem_1.encodePacked)(["bytes", "bytes"], [
            (0, viem_1.encodeAbiParameters)((0, viem_1.parseAbiParameters)(["bytes32, bytes32"]), [
                (0, viem_1.keccak256)((0, viem_1.toBytes)(Constants_1.PARENT_TYPEHASH)),
                messageStuff
            ]),
            accountDomainStructFields
        ]));
        const wrappedTypedHash = (0, Utils_1.eip712WrapHash)(parentStructHash, appDomainSeparator);
        let signature = await module.signMessage({ raw: (0, viem_1.toBytes)(wrappedTypedHash) });
        const contentsType = (0, viem_1.toBytes)((0, Utils_1.typeToString)(types)[1]);
        const signatureData = (0, viem_1.concatHex)([
            signature,
            appDomainSeparator,
            messageStuff,
            (0, viem_1.toHex)(contentsType),
            (0, viem_1.toHex)(contentsType.length, { size: 2 })
        ]);
        signature = (0, viem_1.encodePacked)(["address", "bytes"], [module.address, signatureData]);
        return signature;
    }
    return (0, account_abstraction_1.toSmartAccount)({
        client: walletClient,
        entryPoint: {
            abi: abi_1.EntrypointAbi,
            address: constants_1.ENTRY_POINT_ADDRESS,
            version: "0.7"
        },
        getAddress,
        encodeCalls: (calls) => {
            return calls.length === 1
                ? encodeExecute(calls[0])
                : encodeExecuteBatch(calls);
        },
        getFactoryArgs: async () => ({ factory: factoryAddress, factoryData }),
        getStubSignature: async () => module.getStubSignature(),
        signMessage,
        signTypedData,
        signUserOperation: async (parameters) => {
            const { chainId = publicClient.chain.id, ...userOpWithoutSender } = parameters;
            const address = await getCounterFactualAddress();
            const userOperation = {
                ...userOpWithoutSender,
                sender: address
            };
            const hash = (0, account_abstraction_1.getUserOperationHash)({
                chainId,
                entryPointAddress: account_abstraction_1.entryPoint07Address,
                entryPointVersion: "0.7",
                userOperation
            });
            return await module.signUserOpHash(hash);
        },
        getNonce,
        extend: {
            entryPointAddress: account_abstraction_1.entryPoint07Address,
            getCounterFactualAddress,
            isDeployed,
            getInitCode,
            encodeExecute,
            encodeExecuteBatch,
            getUserOpHash,
            setModule,
            getModule: () => module,
            factoryData,
            factoryAddress,
            signer,
            walletClient,
            publicClient
        }
    });
};
exports.toNexusAccount = toNexusAccount;
//# sourceMappingURL=toNexusAccount.js.map