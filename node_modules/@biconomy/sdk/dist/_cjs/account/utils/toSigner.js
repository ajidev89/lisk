"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toSigner = toSigner;
const viem_1 = require("viem");
const accounts_1 = require("viem/accounts");
const actions_1 = require("viem/actions");
const utils_1 = require("viem/utils");
async function toSigner({ signer, address }) {
    if ("provider" in signer) {
        return (0, accounts_1.toAccount)({
            address: (0, viem_1.getAddress)((await signer.getAddress())),
            async signMessage({ message }) {
                if (typeof message === "string") {
                    return (await signer.signMessage(message));
                }
                if (typeof message.raw === "string") {
                    return (await signer.signMessage((0, viem_1.hexToBytes)(message.raw)));
                }
                return (await signer.signMessage(message.raw));
            },
            async signTransaction(_) {
                throw new Error("Not supported");
            },
            async signTypedData(typedData) {
                return signer.signTypedData(typedData.domain, typedData.types, typedData.message);
            }
        });
    }
    if ("type" in signer && signer.type === "local") {
        return signer;
    }
    let walletClient = undefined;
    if ("request" in signer) {
        if (!address) {
            try {
                ;
                [address] = await signer.request({
                    method: "eth_requestAccounts"
                });
            }
            catch {
                ;
                [address] = await signer.request({
                    method: "eth_accounts"
                });
            }
        }
        if (!address)
            throw new Error("address required");
        walletClient = (0, viem_1.createWalletClient)({
            account: address,
            transport: (0, viem_1.custom)(signer)
        });
    }
    if (!walletClient) {
        walletClient = signer;
    }
    return (0, accounts_1.toAccount)({
        address: walletClient.account.address,
        async signMessage({ message }) {
            return walletClient.signMessage({ message });
        },
        async signTypedData(typedData) {
            return (0, utils_1.getAction)(walletClient, actions_1.signTypedData, "signTypedData")(typedData);
        },
        async signTransaction(_) {
            throw new Error("Not supported");
        }
    });
}
//# sourceMappingURL=toSigner.js.map