"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toSmartSessionsValidator = exports.getUsePermissionInitData = exports.getUsePermissionModuleInitData = void 0;
const module_sdk_1 = require("@rhinestone/module-sdk");
const viem_1 = require("viem");
const toModule_1 = require("../utils/toModule.js");
const DUMMY_ECDSA_SIG = "0xe8b94748580ca0b4993c9a1b86b5be851bfc076ff5ce3a1ff65bf16392acfcb800f9b4f1aef1555c7fce5599fffb17e7c635502154a0333ba21f3ae491839af51c";
const getUsePermissionModuleInitData = (_) => ({
    address: module_sdk_1.SMART_SESSIONS_ADDRESS,
    type: "validator",
    initData: "0x"
});
exports.getUsePermissionModuleInitData = getUsePermissionModuleInitData;
const getUsePermissionInitData = ({ signerAddress }) => (0, viem_1.encodePacked)(["address"], [signerAddress]);
exports.getUsePermissionInitData = getUsePermissionInitData;
const toSmartSessionsValidator = (parameters) => {
    const { account, signer, moduleInitData: moduleInitData_, deInitData = "0x", initData: initData_, moduleInitArgs: moduleInitArgs_ = { signerAddress: signer.address }, initArgs: initArgs_ = { signerAddress: signer.address }, moduleData: { permissionId = "0x", mode = module_sdk_1.SmartSessionMode.USE, enableSessionData } = {} } = parameters;
    const initData = initData_ ?? (0, exports.getUsePermissionInitData)(initArgs_);
    const moduleInitData = moduleInitData_ ?? (0, exports.getUsePermissionModuleInitData)(moduleInitArgs_);
    return (0, toModule_1.toModule)({
        signer,
        accountAddress: account.address,
        address: module_sdk_1.SMART_SESSIONS_ADDRESS,
        initData,
        moduleInitData,
        deInitData,
        getStubSignature: async () => (0, module_sdk_1.encodeSmartSessionSignature)({
            mode,
            permissionId,
            enableSessionData,
            signature: DUMMY_ECDSA_SIG
        }),
        signUserOpHash: async (userOpHash) => (0, module_sdk_1.encodeSmartSessionSignature)({
            mode,
            permissionId,
            enableSessionData,
            signature: await signer.signMessage({
                message: { raw: userOpHash }
            })
        })
    });
};
exports.toSmartSessionsValidator = toSmartSessionsValidator;
//# sourceMappingURL=toSmartSessionsValidator.js.map