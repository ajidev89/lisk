"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trustAttesters = trustAttesters;
const viem_1 = require("viem");
const account_abstraction_1 = require("viem/account-abstraction");
const utils_1 = require("viem/utils");
const AccountNotFound_1 = require("../../../account/utils/AccountNotFound.js");
const constants_1 = require("../../../constants/index.js");
async function trustAttesters(client, parameters) {
    const { account: account_ = client.account, maxFeePerGas, maxPriorityFeePerGas, nonce, attesters = [constants_1.MOCK_ATTESTER_ADDRESS], registryAddress = constants_1.REGISTRY_ADDRESS, threshold = attesters.length } = parameters ?? {};
    if (!account_) {
        throw new AccountNotFound_1.AccountNotFoundError({
            docsPath: "/nexus/nexus-client/methods#sendtransaction"
        });
    }
    const account = (0, utils_1.parseAccount)(account_);
    const trustAttestersData = (0, viem_1.encodeFunctionData)({
        abi: [
            {
                inputs: [
                    { internalType: "uint8", name: "threshold", type: "uint8" },
                    { internalType: "address[]", name: "attesters", type: "address[]" }
                ],
                name: "trustAttesters",
                outputs: [],
                stateMutability: "nonpayable",
                type: "function"
            }
        ],
        functionName: "trustAttesters",
        args: [threshold, attesters]
    });
    return (0, utils_1.getAction)(client, account_abstraction_1.sendUserOperation, "sendUserOperation")({
        calls: [
            {
                to: registryAddress,
                value: 0n,
                data: trustAttestersData
            }
        ],
        maxFeePerGas,
        maxPriorityFeePerGas,
        nonce,
        account
    });
}
//# sourceMappingURL=trustAttesters.js.map